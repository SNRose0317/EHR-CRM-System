name: Dependency Management

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  dependency-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        pnpm audit --audit-level moderate
        
    - name: Check for outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        pnpm outdated
        
    - name: Generate dependency report
      run: |
        echo "📊 Generating dependency report..."
        echo "## Dependency Audit Report" > dependency-report.md
        echo "**Date:** $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "### Security Vulnerabilities" >> dependency-report.md
        pnpm audit --json | jq -r '.advisories[] | "- **\(.title)** (Severity: \(.severity))"' >> dependency-report.md || echo "No vulnerabilities found" >> dependency-report.md
        echo "" >> dependency-report.md
        
        echo "### Outdated Packages" >> dependency-report.md
        pnpm outdated --format=long >> dependency-report.md || echo "All packages are up to date" >> dependency-report.md
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.md

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "⚖️  Checking license compliance..."
        license-checker --summary --excludePrivatePackages > license-summary.txt
        
        # Check for problematic licenses
        if license-checker --failOn 'GPL;LGPL;AGPL' --excludePrivatePackages; then
          echo "✅ No problematic licenses found"
        else
          echo "❌ Problematic licenses detected!"
          exit 1
        fi
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-summary.txt

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build and analyze bundle
      run: |
        echo "📦 Building and analyzing bundle size..."
        pnpm run build
        
        # Calculate bundle sizes
        if [ -d "packages/platform-core/dist" ]; then
          echo "## Bundle Size Report" > bundle-report.md
          echo "**Date:** $(date)" >> bundle-report.md
          echo "" >> bundle-report.md
          
          echo "### Bundle Sizes" >> bundle-report.md
          du -sh packages/platform-core/dist/* >> bundle-report.md
          
          echo "" >> bundle-report.md
          echo "### Total Size" >> bundle-report.md
          du -sh packages/platform-core/dist >> bundle-report.md
        fi
        
    - name: Upload bundle report
      uses: actions/upload-artifact@v4
      with:
        name: bundle-report
        path: bundle-report.md

  create-issue:
    name: Create Maintenance Issue
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, bundle-analysis]
    if: failure()
    
    steps:
    - name: Create maintenance issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🔧 Weekly Maintenance Required - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Weekly Dependency Maintenance
          
          Our automated dependency management workflow has detected issues that require attention.
          
          ### Actions Required:
          - [ ] Review security audit results
          - [ ] Update vulnerable dependencies
          - [ ] Check license compliance issues
          - [ ] Review bundle size changes
          
          ### Reports:
          Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed reports.
          
          ### Next Steps:
          1. Download and review the generated reports
          2. Update problematic dependencies
          3. Test thoroughly in staging environment
          4. Deploy fixes to production
          
          ---
          *This issue was created automatically by the dependency management workflow.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['maintenance', 'dependencies', 'automated']
          });