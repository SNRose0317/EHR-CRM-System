name: Deploy to Vercel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && secrets.VERCEL_TOKEN != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Staging
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
        echo "üöÄ Deployed to staging: $url"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Staging deployment ready!**\n\n**Preview URL:** ${{ steps.deploy.outputs.url }}\n\n*Deployed from commit ${{ github.sha }}*`
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.VERCEL_TOKEN != ''
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy to Production
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
        echo "üéâ Deployed to production: $url"
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Production Release v${{ github.run_number }}
        body: |
          üéâ **Production Deployment**
          
          **Deployed URL:** ${{ steps.deploy.outputs.url }}
          **Commit:** ${{ github.sha }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          
          ## Changes
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  vercel-setup-info:
    name: Vercel Setup Information
    runs-on: ubuntu-latest
    if: secrets.VERCEL_TOKEN == ''
    
    steps:
    - name: Vercel Configuration Notice
      run: |
        echo "üìã Vercel deployment is not configured yet"
        echo ""
        echo "To enable Vercel deployments, add these secrets to your GitHub repository:"
        echo "- VERCEL_TOKEN: Your Vercel authentication token"
        echo "- VERCEL_ORG_ID: Your Vercel organization ID" 
        echo "- VERCEL_PROJECT_ID: Your Vercel project ID"
        echo ""
        echo "Visit: https://github.com/${{ github.repository }}/settings/secrets/actions"
        echo ""
        echo "This is optional - your CI/CD pipeline works without Vercel deployment"

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Health Check
      run: |
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          url="https://ehr-crm-system-staging.vercel.app"
        else
          url="https://ehr-crm-system.vercel.app"
        fi
        
        echo "üîç Performing health check on: $url"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Check if the app is responding
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
        
        if [ "$status_code" == "200" ]; then
          echo "‚úÖ Health check passed! App is responding."
        else
          echo "‚ùå Health check failed! Status code: $status_code"
          exit 1
        fi